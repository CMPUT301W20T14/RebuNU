package com.example.rebunu;

import android.util.Log;
import android.widget.Toast;

import androidx.annotation.NonNull;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreException;
import com.google.firebase.firestore.FirebaseFirestoreSettings;
import com.google.firebase.firestore.GeoPoint;
import com.google.firebase.firestore.Query;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.firestore.Transaction;

import org.imperiumlabs.geofirestore.GeoFirestore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 *
 * Database
 * we have 4 collections:
 * profiles contains the information of the user; requests contains all the currently active requests; orders contains all the deleted or accepted requests; auth contains all the match of username and password
 * @author Zihao Huang
 */

public class Database {

    // we have 4 collections: profiles contains the information of the user
    //                        requests contains all the currently active requests
    //                        orders contains all the deleted or accepted requests
    //                        auth contains all the match of username and password

    FirebaseFirestore db;
    CollectionReference profiles;
    CollectionReference requests;
    CollectionReference orders;
    CollectionReference auth;
    GeoFirestore geoFirestore;

    String TAG = "RebuNu";

    public Database(){
        db = FirebaseFirestore.getInstance();
        profiles = db.collection("profiles");
        requests = db.collection("requests");
        orders = db.collection("orders");
        auth= db.collection("auth");
        geoFirestore = new GeoFirestore(requests);
    }


    /**
     * pass a Hashmap with all information of the user
     * @param map
     * @return the userId which uniquely auto-generated by database
     */

    public String register(HashMap<String,Object> map){
        if(map == null){
            return null;
        }
        HashMap<String,Object> profile = new HashMap<>();

        profile.put("email", map.get("email"));
        profile.put("phone", map.get("phone"));
        profile.put("balance", map.get("balance"));
        profile.put("role", map.get("role"));
        profile.put("name", map.get("name"));
        profile.put("rating", map.get("rating"));

        DocumentReference proRef = profiles.document();
        proRef
                .set(profile)
                .addOnSuccessListener(aVoid -> Log.d(TAG, "profile storing is successful"))
                .addOnFailureListener(e -> Log.d(TAG, "profile saving failed"));

        addAuth(map.get("phone").toString(), map.get("email").toString(), map.get("password").toString(), proRef.getId(),(Boolean)map.get("role"));
        return proRef.getId();
    }

    /**
     * add the password and username to this collection, used for check password when log in
     * @param phone
     * @param email
     * @param password
     * @param profileId
     * @param role
     */

    public void addAuth(String phone, String email, String password, String profileId, Boolean role){
        HashMap<String, Object> au = new HashMap<>();
        au.put("password",password);
        au.put("profileId", profileId);
        au.put("role", role);
        auth
                .document(phone)
                .set(au)
                .addOnSuccessListener(aVoid -> Log.d(TAG, "auth storing is successful"))
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.d(TAG, "auth saving failed");
                    }
                });
        auth
                .document(email)
                .set(au)
                .addOnSuccessListener(aVoid -> Log.d(TAG, "auth storing is successful"))
                .addOnFailureListener(e -> Log.d(TAG, "auth saving failed"));
    }
    public void deleteAuth(String phone, String email){
        if(phone == null || email == null){
            throw new IllegalArgumentException("phone/email cannot be null");
        }
        try{
            auth
                    .document(phone)
                    .delete();
            auth
                    .document(email)
                    .delete();
        }catch (Exception e){throw new IllegalArgumentException("No such auth");}
    }

    /**
     * add the user's profile to database
     * @param p
     * @return profileId which uniquely generated by database
     */

    public String addProfile(Profile p){
        HashMap<String,Object> profile = new HashMap<>();
        profile.put("balance",p.getBalance());
        profile.put("email", p.getEmail());
        profile.put("phone", p.getPhone());
        profile.put("role", p.getRole());
        profile.put("name", p.getName());

        if(p.getRole()){
            ArrayList<Integer> rating = new ArrayList<>();
            rating.add(p.getRating().getThumbsUp());
            rating.add(p.getRating().getThumbsDown());
            profile.put("rating",rating);
        }else{
            profile.put("rating",new ArrayList<Integer>());
        }

        DocumentReference docRef = profiles.document();
        docRef
                .set(profile)
                .addOnSuccessListener(aVoid -> Log.d(TAG, "profile storing is successful"))
                .addOnFailureListener(e -> Log.d(TAG, "profile saving failed"));
        return docRef.getId();
    }

    /**
     * add request to database
     * @param r
     * @return requestId which uniquely generated by database
     */

    public String addRequest(Request r){
        HashMap<String, Object> request = new HashMap<>();
        ArrayList<GeoPoint> pos = new ArrayList<>();
        GeoPoint start = new GeoPoint(r.getStart().getLatitude(), r.getStart().getLongitude());
        GeoPoint end= new GeoPoint(r.getEnd().getLatitude(), r.getEnd().getLongitude());
        pos.add(start);
        pos.add(end);
        request.put("price",r.getPrice());
        request.put("riderId", r.getRiderId());
        request.put("pos", pos);
        DocumentReference docRef = requests.document();

        docRef
                .set(request)
                .addOnSuccessListener(aVoid -> Log.d(TAG, "request storing is successful"))
                .addOnFailureListener(e -> Log.d(TAG, "request saving failed"));
        geoFirestore.setLocation(docRef.getId(), start);
        return docRef.getId();
    }

    /**
     * add order to database
     * @param o
     * @return the orderId
     */

    public String addOrder(Order o){
        HashMap<String , Object> order = new HashMap<>();

        ArrayList<GeoPoint> pos = new ArrayList<>();
        GeoPoint start = new GeoPoint(o.getStart().getLatitude(), o.getStart().getLongitude());
        GeoPoint end= new GeoPoint(o.getEnd().getLatitude(), o.getEnd().getLongitude());

        pos.add(start);
        pos.add(end);

        order.put("price",o.getPrice());
        order.put("riderId", o.getRiderId());
        order.put("pos", pos);
        order.put("rating",o.getRating());
        order.put("status",o.getStatus());
        order.put("driverId",o.getDriverId());

        DocumentReference docRef = orders.document(o.getId());

        docRef
                .set(order)
                .addOnSuccessListener(aVoid -> Log.d(TAG, "order storing is successful"))
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.d(TAG, "order saving failed");
                    }
                });

        return docRef.getId();

    }

    /**
     * This is the encapsulation of addRequest, addOrder, addProfile
     * @param record
     * @return id
     * @throws IllegalArgumentException
     */

    public String add(Record record){
        if(true){
            switch (record.getType()){
                case 1:
                    return addProfile((Profile)record);

                case 2:
                    return addRequest((Request)record);

                case 3:
                    return addOrder((Order)record);
            }
        }else{throw new IllegalArgumentException("Already have this record");}

        return null;

    }

    /**
     * delete a record(includes profile, order, request)
     * @param record
     * @throws IllegalArgumentException
     */

    public void delete(Record record) {
        if(record.getType() == 1){
            throw new IllegalArgumentException("Cannot delete profile");
        }
        try{
            switch (record.getType()) {
//                case 1:
//                    profiles
//                            .document(record.getId())
//                            .delete();
//
//                    break;

                case 2:
                    requests
                            .document(record.getId())
                            .delete();

                    break;

                case 3:
                    orders
                            .document(record.getId())
                            .delete();
                    break;
                }
            } catch (Exception e){throw new IllegalArgumentException("There is no such record!");}
    }

    /**
     * delete a record by its id and type
     * @param id
     * @param type
     * @throws IllegalArgumentException
     */
    public void deleteById(String id, Integer type) {
        if(type == 1){
            throw new IllegalArgumentException("Cannot delete profile");
        }
        try{
            switch (type) {
//                case 1:
//                    profiles
//                            .document(record.getId())
//                            .delete();
//
//                    break;

                case 2:
                    requests
                            .document(id)
                            .delete();

                    break;

                case 3:
                    orders
                            .document(id)
                            .delete();
                    break;
            }
        } catch (Exception e){throw new IllegalArgumentException("There is no such record!");}
    }

    /**
     * modify profile
     * @param p
     */

    public void modifyProfile(Profile p){

        final DocumentReference proDocRef = profiles.document(p.getId());
        ArrayList<Integer> rating = new ArrayList<>();

        if(p.getRole()){
            rating.add(p.getRating().getThumbsUp());
            rating.add(p.getRating().getThumbsDown());
        }

        proDocRef
                .update("balance", p.getBalance(),"email",p.getEmail(),"phone",p.getPhone(),"role",p.getRole(),"name",p.getName(),"rating",rating)
                .addOnSuccessListener(aVoid -> Log.d(TAG, "DocumentSnapshot successfully updated!"))
                .addOnFailureListener(e -> Log.w(TAG, "Error updating document", e));


    }

    /**
     * modify request
     * @param r
     * @throws IllegalArgumentException
     */

    public void modifyRequest(Request r){
        try{
            final DocumentReference reqDocRef = requests.document(r.getId());
            ArrayList<GeoPoint> pos = new ArrayList<>();
            GeoPoint start = new GeoPoint(r.getStart().getLatitude(), r.getStart().getLongitude());
            GeoPoint end= new GeoPoint(r.getEnd().getLatitude(), r.getEnd().getLongitude());
            pos.add(start);
            pos.add(end);

            reqDocRef
                    .update("price", r.getPrice(),"riderId",r.getRiderId(),"pos",pos)
                    .addOnSuccessListener(aVoid -> Log.d(TAG, "DocumentSnapshot successfully updated!"))
                    .addOnFailureListener(e -> Log.w(TAG, "Error updating document", e));
            geoFirestore.setLocation(r.getId(), start);
        }catch (Exception e){
            throw new IllegalArgumentException("No such record!");
        }
    }

    /**
     * modify the status of order
     * @param id
     * @param status
     * @throws  IllegalArgumentException
     */

    public void modifyOrderStatus(String id, Integer status){
        try{
            final DocumentReference ordDocRef = orders.document(id);

            ordDocRef
                    .update("status",status)
                    .addOnSuccessListener(aVoid -> Log.d(TAG, "DocumentSnapshot successfully updated!"))
                    .addOnFailureListener(e -> Log.w(TAG, "Error updating document", e));

        }catch (Exception e){
            throw new IllegalArgumentException("No such record!");
        }
    }

    /**
     * modify order
     * @param o
     * @throws  IllegalArgumentException
     */

    public void modifyOrder(Order o){
        try{
            final DocumentReference ordDocRef = orders.document(o.getId());
            ArrayList<GeoPoint> pos = new ArrayList<>();
            GeoPoint start = new GeoPoint(o.getStart().getLatitude(), o.getStart().getLongitude());
            GeoPoint end= new GeoPoint(o.getEnd().getLatitude(), o.getEnd().getLongitude());
            pos.add(start);
            pos.add(end);

            ordDocRef
                    .update("price", o.getPrice(),"riderId",o.getRiderId(),"pos",pos, "driverId",o.getDriverId(),"rating", o.getRating(),"status",o.getStatus())
                    .addOnSuccessListener(new OnSuccessListener<Void>() {
                        @Override
                        public void onSuccess(Void aVoid) {
                            Log.d(TAG, "DocumentSnapshot successfully updated!");
                        }
                    })
                    .addOnFailureListener(new OnFailureListener() {
                        @Override
                        public void onFailure(@NonNull Exception e) {
                            Log.w(TAG, "Error updating document", e);
                        }
                    });

        }catch (Exception e){
            throw new IllegalArgumentException("No such record!");
        }
    }

    /**
     * This is an encapsulation of modifyRequest, modifyOrder, modifyProfile
     * @param record
     */
    public void modify(Record record){
        if(record.getType() == 3){
            modifyOrder((Order)record);
        }
        if(record.getType() == 1){
            modifyProfile((Profile)record);
        }
        if(record.getType() == 2){
            modifyRequest((Request)record);
        }
    }

    public void transaction(String driverId, String riderId, Integer price){
        profiles.document(riderId)
                .get()
                .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                        if (task.isSuccessful()) {
                            DocumentSnapshot document = Objects.requireNonNull(task.getResult());
                            if (document.exists()) {
                                Long riderBalance = document.getLong("balance");
                                Long newBalance = riderBalance - price;
                                document.getReference().update("balance",newBalance);
                            }
                        }
                    }
                });

        profiles.document(driverId)
                .get()
                .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                        if (task.isSuccessful()) {
                            DocumentSnapshot document = Objects.requireNonNull(task.getResult());
                            if (document.exists()) {
                                Long driverBalance = document.getLong("balance");
                                Long newBalance = driverBalance + price;
                                document.getReference().update("balance",newBalance);
                            }
                        }
                    }
                });
    }

}
